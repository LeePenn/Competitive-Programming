```cpp
// {0~n-1}的所有子集：增量构造法
// Rujia Liu
#include<cstdio>
using namespace std;

void print_subset(int n, int* A, int cur) {
  for(int i = 0; i < cur; i++) printf("%d ", A[i]); // 打印当前集合    
  printf("\n");
  int s = cur ? A[cur-1]+1 : 0; // 确定当前元素的最小可能值
  for(int i = s; i < n; i++) {
    A[cur] = i;
    print_subset(n, A, cur+1); // 递归构造子集
  }
}

int A[10];
int main() {
  int n;
  scanf("%d", &n);
  print_subset(n, A, 0);
  return 0;
}
```


```cpp
// Joker
#include <bits/stdc++.h>
using namespace std;

const int N = 10;
int n, a[N];

void print_subset(int idx, vector<int>& ans) {
  for (int i = 0; i < (int)ans.size(); i++)
    printf("%d ", ans[i]);
  printf("\n");
  if (idx == n + 1) return;
  
  for (int i = idx; i <= n; i++) {
    ans.push_back(a[i]);
    print_subset(i + 1, ans);
    ans.pop_back();
  }
}

int main() {
  //std::ios::sync_with_stdio(false);
  //std::cin.tie(0);
  
  while (scanf("%d", &n) == 1 && n) {
    for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
    vector<int> ans;
    print_subset(1, ans);
  }
  
  
  return 0;
}
```