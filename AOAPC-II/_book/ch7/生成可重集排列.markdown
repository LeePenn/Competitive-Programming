```cpp
// 可重集的全排列
// Rujia Liu
#include<cstdio>
#include<algorithm>
using namespace std;

int P[100], A[100];

// 输出数组P中元素的全排列。数组P中可能有重复元素
void print_permutation(int n, int* P, int* A, int cur) {
  if(cur == n) {
    for(int i = 0; i < n; i++) printf("%d ", A[i]);
    printf("\n");
  } else for(int i = 0; i < n; i++) if(!i || P[i] != P[i-1]) {
    int c1 = 0, c2 = 0;
    for(int j = 0; j < cur; j++) if(A[j] == P[i]) c1++;
    for(int j = 0; j < n; j++) if(P[i] == P[j]) c2++;
    if(c1 < c2) {
      A[cur] = P[i];
      print_permutation(n, P, A, cur+1);
    }
  }
}

int main() {
  int i, n;
  scanf("%d", &n);
  for(i = 0; i < n; i++)
    scanf("%d", &P[i]);
  sort(P, P+n);
  print_permutation(n, P, A, 0);
  return 0;
}
```


```cpp
// Joker
#include <bits/stdc++.h>
using namespace std;

const int N = 10;
int n, a[N];

void dfs(int idx) {
  if (idx == n + 1) {
    for (int i = 1; i <= n; i++) {
      printf("%d ", a[i]);
    }
    printf("\n");
    return;
  }
  unordered_set<int> memo;
  for (int i = idx; i <= n; i++) {
    if (memo.count(a[i])) continue;
    memo.insert(a[i]);
    swap(a[i], a[idx]);
    dfs(idx + 1);
    swap(a[i], a[idx]);
  }
}

int main() {
  //std::ios::sync_with_stdio(false);
  //std::cin.tie(0);
  
  while (scanf("%d", &n) == 1 && n) {
    for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
    dfs(1);
  }
  
  
  return 0;
}
```